[build-system]
requires = ["setuptools>=67", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tribute-pipeline"
version = "0.1.5"
description = "Deterministic crawl → insight extraction → classification pipeline with health/validation"
authors = [{name = "Your Name", email = "you@example.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["crawl","classification","insights","pipeline"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent"
]
dependencies = [
  "requests",
  "beautifulsoup4",
  "lxml",
  "tqdm",
  "numpy",
  "scikit-learn"
]

[project.optional-dependencies]
full = ["sentence-transformers", "torch", "transformers"]
dev = ["pytest", "black"]

[project.scripts]
# NOTE: The only discovered package at the moment is the top-level 'src' (due to __init__.py).
# Modules placed directly under src/ are importable as 'src.<module>'. Previous entry points
# incorrectly referenced them as top-level modules (inprocess_runner, selfcheck) which caused
# ModuleNotFoundError when installed from a wheel. Long term we may rename the package to
# 'tribute_pipeline', but for now adjust to the correct fully-qualified module path.
tribute-run = "src.inprocess_runner:main"
tribute-e2e = "src.inprocess_runner:main_all"
tribute-validate = "scripts.validate_delivery:main"
tribute-synthetic = "scripts.generate_synthetic_predictions:main"
tribute-selfcheck = "src.selfcheck:main"
tribute-loc = "scripts.count_loc:main"

[tool.setuptools.packages.find]
# Include core source tree plus the top-level 'scripts' package so console entrypoints resolve after pip install.
where = ["src", "."]
include = ["*"]

[tool.black]
line-length = 100
